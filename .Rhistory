install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("labeling")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages(c("mime", "R6", "bitops"))
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE, force=TRUE)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
exit
exit()
quit()
optim
ls
library("swirl")
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 != 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
sys.Date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){tail(x, n=1)}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
telegram("All", "is", "well")
submit()
submit()
submit()
mad_libs(place="Bengaluru", adjective="many", noun="cameras")
submit()
'I' %p% 'Love' %p% 'R!'
"I" %p% "Love" %p% "R!"
info()
("I" %p% "Love") %p% "R!"
("I" %p% "love") %p% "R!"
'I' %p% 'love' %p% 'R!'
q()
cube <- function(x, n) {}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if (x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
q()
library("swirl")
rm(list=ls())
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
vapply(flags, unique, numeric
)
vapply(flags, unique, list)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
play()
flags$population
flags$red
nxt()
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
getwd()
setwd("D:/Dev/Documents/Books/Analytics/Johns Hopkins Data Science Specialization/02-R Programming/Dev/src/ProgrammingAssignment2")
source("cachematrix.R")
mx <- matrix(c(1,2,3, 11,12,13), nrow=2, ncol=3, dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3")))
mx
cmx <- makeCacheMatrix(mx)
cmx
cacheSolve(cmx)
rm(list=ls())
source("cachematrix.R")
mx <- matrix(c(1,2,3, 11,12,13, 21,22,23), nrow=3, ncol=3, dimnames = list(c("row1", "row2", "row3"), c("C.1", "C.2", "C.3")))
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(1,2,3, 11,12,13, 21,22,23), nrow=3, ncol=3)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx
cmx
cmx <- makeCacheMatrix()
cmx$set(mx)
cmx
cacheSolve(cmx)
mx <- matrix(c(1,2,3, 11,12,13, 21,22,23), nrow=3, ncol=3, dimnames = list(c("row1", "row2", "row3"), c("C.1", "C.2", "C.3")))
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
source('D:/Dev/Documents/Books/Analytics/Johns Hopkins Data Science Specialization/02-R Programming/Dev/src/ProgrammingAssignment2/cachematrix.R')
mx <- matrix(c(1,2,3, 11,12,13, 21,22,23), nrow=3, ncol=3, dimnames = list(c("row1", "row2", "row3"), c("C.1", "C.2", "C.3")))
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(7,0,-3, 2,3,4, 1,-1,-2), nrow=3, ncol=3, dimnames = list(c("row1", "row2", "row3"), c("C.1", "C.2", "C.3")))
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
cacheSolve(cmx)
mx <- matrix(c(-2,3,9, 8,-11,-34, -5,7,21), nrow=3, ncol=3, dimnames = list(c("row1", "row2", "row3"), c("C.1", "C.2", "C.3")))
cacheSolve(cmx)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(-2,3,9, 8,-11,-34, -5,7,21), nrow=3, ncol=3)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(-2,3,9, 8,-11,-34, -5,7,21), nrow=3, ncol=3)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(-7,0,-3 2,3,4 1,-1,-2), nrow=3, ncol=3)
mx <- matrix(c(-7,0,-3 2,3,4, 1,-1,-2), nrow=3, ncol=3)
mx <- matrix(c(-7,0,-3, 2,3,4, 1,-1,-2), nrow=3, ncol=3)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
mx <- matrix(c(7,0,-3, 2,3,4, 1,-1,-2), nrow=3, ncol=3)
cmx <- makeCacheMatrix(mx)
cacheSolve(cmx)
q()
